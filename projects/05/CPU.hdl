// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // set isCinst
    Or(a=instruction[15], b=instruction[15], out=isCInst);
	
	// process A instruction, if instruction[15] == 0: a instruction
	Mux16(a=instruction, b=areg, sel=instruction[15], out=newareg);
	// if writeA == 1, curareg = aluout
	Mux16(a=newareg, b=aluout, sel=writeA, out=curareg);

	// check loadareg
	Not(in=instruction[15], out=setareg);
	Or(a=setareg, b=writeA, out=loadareg);
	ARegister(in=curareg, load=loadareg, out=areg, out[0..14]=addressM);

	// select between ARegister and inM
	// selector is instruction[12] which is an a-bit (refer week 4 unit4.4 5:03)
	// if instruction[12] == 0 : select AReg 
	Mux16(a=areg, b=inM, sel=instruction[12], out=aorm);

	// select dreg
	DRegister(in=aluout, load=writeD, out=dreg);

	// put all into ALU
	ALU(x=dreg, y=aorm, zx=instruction[11], nx=instruction[10], 
		zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
		out=aluout, out=outM, zr=zr, ng=ng);
	And (a=zr, b=instruction[15], out=aluzr);
	And (a=ng, b=instruction[15], out=alung);

	// set destination flags when instruction is c-inst
	And (a=instruction[3], b=isCInst, out=writeM);
	And (a=instruction[4], b=isCInst, out=writeD);
	And (a=instruction[5], b=isCInst, out=writeA);


	// process jmp flags
	// if aluout == 0: zr = 1
	// if aluout < 0: ng = 1

	Not(in=aluzr, out=notzr);
	Not(in=alung, out=notng);
	// set jle out <= 0, jgt out > 0 (nr or ng == 0);
	Or(a=alung, b=aluzr, out=canjle);
	Not(in=canjle, out=canjgt);
	// set jeq out == 0, jne out != 0
	And(a=notng, b=aluzr, out=canjeq);
	Not(in=canjeq, out=canjne);

	// set jge out >= 0, jlt out < 0
	And(a=alung, b=notzr, out=canjlt);
	Not(in=canjlt, out=canjge);


	// filter jmp instructions
	And (a=instruction[0], b=isCInst, out=jmp0);
	And (a=instruction[1], b=isCInst, out=jmp1);
	And (a=instruction[2], b=isCInst, out=jmp2);
	DMux8Way(in=true, sel[0]=jmp0, sel[1]=jmp1, sel[2]=jmp2,
			 a=isnull, b=isjgt, c=isjeq,
			 d=isjge, e=isjlt, f=isjne, g=isjle, h=isjmp);
    And(a=canjgt, b=isjgt, out=setjgt);
    And(a=canjeq, b=isjeq, out=setjeq);
    And(a=canjge, b=isjge, out=setjge);
    And(a=canjlt, b=isjlt, out=setjlt);
    And(a=canjne, b=isjne, out=setjne);
    And(a=canjle, b=isjle, out=setjle);

    Or8Way(in[0]=false, in[1]=setjgt, in[2]=setjeq, in[3]=setjge,
    	   in[4]=setjlt, in[5]=setjne, in[6]=setjle, in[7]=isjmp,
    	   out=execjmp);
    Not(in=execjmp, out=notexecjmp);


	PC(in=areg, load=execjmp, inc=notexecjmp, reset=reset, out[0..14]=pc);
}
