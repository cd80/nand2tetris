// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // create null array[16]
    Not16 (in=x, out=null1);
    And16 (a=x, b=null1, out=nullarr);

    // zeroing (if zx == 1, out = nullarr)
    Mux16 (a=x, b=nullarr, sel=zx, out=tmpx);
    Mux16 (a=y, b=nullarr, sel=zy, out=tmpy);

    // negating
    Not16 (in=tmpx, out=notx);
    Not16 (in=tmpy, out=noty);
    Mux16 (a=tmpx, b=notx, sel=nx, out=realx);
    Mux16 (a=tmpy, b=noty, sel=ny, out=realy);

    // now process f, if f==1: x+y, else: x&y
    Add16 (a=realx, b=realy, out=xplusy);
    And16 (a=realx, b=realy, out=xandy);
    Mux16 (a=xandy, b=xplusy, sel=f, out=afterf);

    // process no(negate output);
    Not16 (in=afterf, out=negated);
    // make out tmp to process with output flags(zr, ng)
    Mux16 (a=afterf, b=negated, sel=no, out=tmpout); 

    // first, flush tmpout to out
    Or16 (a=tmpout, b=nullarr, out=out);

    // divide tmpout to high and low and msb
    Or16 (a=tmpout, b=nullarr, out[0..7]=highout, out[8..15]=lowout, out[15]=msbout);
    // use two Or8way's to check if out==0
    Or8Way  (in=highout, out=high0);
    Or8Way  (in=lowout, out=low0);
    Or      (a=high0, b=low0, out=outisnot0); // if outisnot0 == 1: out is not zero
    Mux     (a=true, b=false, sel=outisnot0, out=zr);

    // check msb to see if out < 0
    // if tmpout[15] == 1, ng = true
    Mux  (a=false, b=true, sel=msbout, out=ng);

}